https://practice.geeksforgeeks.org/problems/optimal-binary-search-tree2214/1



    static int optimalSearchTree(int keys[], int freq[], int n)
    {
       int psa[]=new int[n];
       //prefix sum array
       psa[0]=freq[0];
       for(int i=1;i<n;i++){
           psa[i]=psa[i-1]+freq[i];
       }
        
        int[][]dp=new int[n][n];
        for(int g=0;g<n;g++){
            for(int i=0, j=g; j<n; i++,j++ ){
                if(g==0){
                    dp[i][j]=freq[i];
                }
                else if(g==1){
                    dp[i][j]=Math.min(freq[i]+2*freq[j], 2*freq[i]+freq[j]);
                }
                else{
                    dp[i][j]=Integer.MAX_VALUE;
                    for(int k1=1, k2=g+1; k2>=1 ; k2--,k1++){
                        // int left=(j-k2>0)? dp[i][j-k2]: 0 ;
                        // int rt=(i+k1<n)? dp[j][i+k1]: 0;
                        
                        int left=(j-k2)==-1?0:dp[i][j-k2];
                        int right=(i+k1)==n?0:dp[i+k1][j];
                        
                        int factor=psa[j]-(i>0 ? psa[i-1]:0);
                        
                        dp[i][j]=Math.min(dp[i][j], left+right+factor);
                    }
                }
            }
        }
        
        return dp[0][n-1];
        
        
    }
