https://practice.geeksforgeeks.org/problems/probability-of-knight5529/1



  public double findProb(int N, int x, int y, int step)
    {
       double [][][]dp=new double[N][N][step+1];
       dp[x][y][0]=1;
       
    int[][] dirs = {{1, -2}, {2, -1}, {2, 1}, {1, 2}, {-1, 2}, {-2, 1}, {-2, -1}, {-1, -2}};
       
       for(int move=1;move<=step;move++){
           for(int i=0;i<N;i++){
               for(int j=0;j<N;j++){
                   for(int[]dir:dirs){
                       int nx=i+dir[0];
                       int ny=j+dir[1];
                       
                       if(nx>=0 && nx<N && ny>=0 && ny<N){
                           dp[nx][ny][move]+=dp[i][j][move-1]/8;
                       }
                   }
               }
           }
       }
       
       double res=0;
       
         for(int i = 0; i < dp.length; i++){
            for(int j = 0; j < dp[0].length; j++){
                res += dp[i][j][step];
            }
        }
        
        return res;
       
    }